"""Add scholarship and essay tables

Revision ID: 0512db48d27e
Revises: b1226752b376
Create Date: 2025-08-29 04:49:57.191932

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0512db48d27e'
down_revision: Union[str, None] = 'b1226752b376'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('scholarships',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('organization', sa.String(length=255), nullable=False),
    sa.Column('website_url', sa.String(length=500), nullable=True),
    sa.Column('application_url', sa.String(length=500), nullable=True),
    sa.Column('scholarship_type', sa.Enum('ACADEMIC_MERIT', 'NEED_BASED', 'ATHLETIC', 'STEM', 'ARTS', 'DIVERSITY', 'FIRST_GENERATION', 'COMMUNITY_SERVICE', 'LEADERSHIP', 'LOCAL_COMMUNITY', 'EMPLOYER_SPONSORED', 'MILITARY', 'RELIGIOUS', 'CAREER_SPECIFIC', 'ESSAY_BASED', 'RENEWABLE', name='scholarshiptype'), nullable=False),
    sa.Column('categories', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'EXPIRED', 'DRAFT', 'PENDING_REVIEW', name='scholarshipstatus'), nullable=False),
    sa.Column('difficulty_level', sa.Enum('EASY', 'MODERATE', 'HARD', 'VERY_HARD', name='difficultylevel'), nullable=False),
    sa.Column('amount_min', sa.Integer(), nullable=True),
    sa.Column('amount_max', sa.Integer(), nullable=True),
    sa.Column('amount_exact', sa.Integer(), nullable=True),
    sa.Column('is_renewable', sa.Boolean(), nullable=True),
    sa.Column('renewal_years', sa.Integer(), nullable=True),
    sa.Column('number_of_awards', sa.Integer(), nullable=True),
    sa.Column('min_gpa', sa.Float(), nullable=True),
    sa.Column('max_gpa', sa.Float(), nullable=True),
    sa.Column('min_sat_score', sa.Integer(), nullable=True),
    sa.Column('min_act_score', sa.Integer(), nullable=True),
    sa.Column('required_majors', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('excluded_majors', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('academic_level', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('eligible_ethnicities', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('gender_requirements', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('first_generation_college_required', sa.Boolean(), nullable=True),
    sa.Column('income_max', sa.Integer(), nullable=True),
    sa.Column('income_min', sa.Integer(), nullable=True),
    sa.Column('need_based_required', sa.Boolean(), nullable=True),
    sa.Column('eligible_states', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('eligible_cities', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('eligible_counties', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('zip_codes', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('international_students_eligible', sa.Boolean(), nullable=True),
    sa.Column('eligible_schools', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('high_school_names', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('graduation_year_min', sa.Integer(), nullable=True),
    sa.Column('graduation_year_max', sa.Integer(), nullable=True),
    sa.Column('required_activities', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('volunteer_hours_min', sa.Integer(), nullable=True),
    sa.Column('leadership_required', sa.Boolean(), nullable=True),
    sa.Column('work_experience_required', sa.Boolean(), nullable=True),
    sa.Column('special_talents', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('essay_required', sa.Boolean(), nullable=True),
    sa.Column('essay_topics', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('essay_word_limit', sa.Integer(), nullable=True),
    sa.Column('transcript_required', sa.Boolean(), nullable=True),
    sa.Column('recommendation_letters_required', sa.Integer(), nullable=True),
    sa.Column('portfolio_required', sa.Boolean(), nullable=True),
    sa.Column('interview_required', sa.Boolean(), nullable=True),
    sa.Column('personal_statement_required', sa.Boolean(), nullable=True),
    sa.Column('leadership_essay_required', sa.Boolean(), nullable=True),
    sa.Column('community_service_essay_required', sa.Boolean(), nullable=True),
    sa.Column('application_opens', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('award_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_rolling_deadline', sa.Boolean(), nullable=True),
    sa.Column('languages_preferred', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('military_affiliation_required', sa.Boolean(), nullable=True),
    sa.Column('employer_affiliation', sa.String(length=255), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('featured', sa.Boolean(), nullable=True),
    sa.Column('views_count', sa.Integer(), nullable=True),
    sa.Column('applications_count', sa.Integer(), nullable=True),
    sa.Column('ai_generated_summary', sa.Text(), nullable=True),
    sa.Column('matching_keywords', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('last_verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('verification_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scholarships_id'), 'scholarships', ['id'], unique=False)
    op.create_index(op.f('ix_scholarships_organization'), 'scholarships', ['organization'], unique=False)
    op.create_index(op.f('ix_scholarships_scholarship_type'), 'scholarships', ['scholarship_type'], unique=False)
    op.create_index(op.f('ix_scholarships_title'), 'scholarships', ['title'], unique=False)
    op.create_table('scholarship_matches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('scholarship_id', sa.Integer(), nullable=False),
    sa.Column('match_score', sa.Float(), nullable=False),
    sa.Column('match_reasons', sa.JSON(), nullable=True),
    sa.Column('mismatch_reasons', sa.JSON(), nullable=True),
    sa.Column('viewed', sa.Boolean(), nullable=True),
    sa.Column('interested', sa.Boolean(), nullable=True),
    sa.Column('applied', sa.Boolean(), nullable=True),
    sa.Column('bookmarked', sa.Boolean(), nullable=True),
    sa.Column('application_status', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('match_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('viewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('applied_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['scholarship_id'], ['scholarships.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scholarship_matches_id'), 'scholarship_matches', ['id'], unique=False)
    op.create_index(op.f('ix_scholarship_matches_scholarship_id'), 'scholarship_matches', ['scholarship_id'], unique=False)
    op.create_index(op.f('ix_scholarship_matches_user_id'), 'scholarship_matches', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_scholarship_matches_user_id'), table_name='scholarship_matches')
    op.drop_index(op.f('ix_scholarship_matches_scholarship_id'), table_name='scholarship_matches')
    op.drop_index(op.f('ix_scholarship_matches_id'), table_name='scholarship_matches')
    op.drop_table('scholarship_matches')
    op.drop_index(op.f('ix_scholarships_title'), table_name='scholarships')
    op.drop_index(op.f('ix_scholarships_scholarship_type'), table_name='scholarships')
    op.drop_index(op.f('ix_scholarships_organization'), table_name='scholarships')
    op.drop_index(op.f('ix_scholarships_id'), table_name='scholarships')
    op.drop_table('scholarships')
    # ### end Alembic commands ###
