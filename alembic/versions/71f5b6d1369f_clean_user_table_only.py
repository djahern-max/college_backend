"""Clean user table only

Revision ID: 71f5b6d1369f
Revises: 5e4c096f31c7
Create Date: 2025-08-20 18:44:53.128466

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '71f5b6d1369f'
down_revision: Union[str, None] = '5e4c096f31c7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_oauth_accounts_id', table_name='oauth_accounts')
    op.drop_table('oauth_accounts')
    op.drop_index('ix_oauth_states_id', table_name='oauth_states')
    op.drop_index('ix_oauth_states_state', table_name='oauth_states')
    op.drop_table('oauth_states')
    op.drop_index('ix_user_profiles_id', table_name='user_profiles')
    op.drop_table('user_profiles')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_of_birth', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('high_school_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('graduation_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gpa', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sat_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('act_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('intended_major', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('academic_interests', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('career_goals', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('extracurricular_activities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('volunteer_experience', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('volunteer_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('work_experience', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ethnicity', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('first_generation_college', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('household_income_range', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('zip_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('preferred_college_size', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('preferred_college_location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('college_application_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('personal_statement', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('leadership_experience', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('challenges_overcome', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scholarship_types_interested', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('application_deadline_preference', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('languages_spoken', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('special_talents', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('additional_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('profile_completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('completion_percentage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_profiles_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_profiles_pkey'),
    sa.UniqueConstraint('user_id', name='user_profiles_user_id_key')
    )
    op.create_index('ix_user_profiles_id', 'user_profiles', ['id'], unique=False)
    op.create_table('oauth_states',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('redirect_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='oauth_states_pkey')
    )
    op.create_index('ix_oauth_states_state', 'oauth_states', ['state'], unique=False)
    op.create_index('ix_oauth_states_id', 'oauth_states', ['id'], unique=False)
    op.create_table('oauth_accounts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('provider_user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('profile_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='oauth_accounts_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='oauth_accounts_pkey')
    )
    op.create_index('ix_oauth_accounts_id', 'oauth_accounts', ['id'], unique=False)
    # ### end Alembic commands ###
