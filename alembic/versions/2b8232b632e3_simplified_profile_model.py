"""simplified profile model

Revision ID: 2b8232b632e3
Revises: 566c8ec5c45b
Create Date: 2025-10-03 04:32:52.655158

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2b8232b632e3'
down_revision: Union[str, None] = '566c8ec5c45b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('user_profiles', 'state',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=2),
               existing_nullable=True)
    op.alter_column('user_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index('ix_user_profiles_act_score', table_name='user_profiles')
    op.drop_index('ix_user_profiles_city', table_name='user_profiles')
    op.drop_index('ix_user_profiles_first_generation_college', table_name='user_profiles')
    op.drop_index('ix_user_profiles_gpa', table_name='user_profiles')
    op.drop_index('ix_user_profiles_high_school_name', table_name='user_profiles')
    op.drop_index('ix_user_profiles_household_income_range', table_name='user_profiles')
    op.drop_index('ix_user_profiles_intended_major', table_name='user_profiles')
    op.drop_index('ix_user_profiles_sat_score', table_name='user_profiles')
    op.drop_index('ix_user_profiles_zip_code', table_name='user_profiles')
    op.drop_column('user_profiles', 'has_personal_statement')
    op.drop_column('user_profiles', 'class_rank')
    op.drop_column('user_profiles', 'musical_instruments')
    op.drop_column('user_profiles', 'certifications')
    op.drop_column('user_profiles', 'class_size')
    op.drop_column('user_profiles', 'sat_math')
    op.drop_column('user_profiles', 'extracurricular_activities')
    op.drop_column('user_profiles', 'has_community_service_essay')
    op.drop_column('user_profiles', 'disability_status')
    op.drop_column('user_profiles', 'application_deadline_preference')
    op.drop_column('user_profiles', 'has_academic_interest_essay')
    op.drop_column('user_profiles', 'additional_notes')
    op.drop_column('user_profiles', 'college_application_status')
    op.drop_column('user_profiles', 'phone_number')
    op.drop_column('user_profiles', 'has_leadership_essay')
    op.drop_column('user_profiles', 'greek_life_interest')
    op.drop_column('user_profiles', 'min_scholarship_amount')
    op.drop_column('user_profiles', 'gender')
    op.drop_column('user_profiles', 'religious_affiliation')
    op.drop_column('user_profiles', 'competitions')
    op.drop_column('user_profiles', 'volunteer_hours')
    op.drop_column('user_profiles', 'has_diversity_essay')
    op.drop_column('user_profiles', 'sat_verbal')
    op.drop_column('user_profiles', 'completion_percentage')
    op.drop_column('user_profiles', 'volunteer_experience')
    op.drop_column('user_profiles', 'study_abroad_interest')
    op.drop_column('user_profiles', 'academic_interests')
    op.drop_column('user_profiles', 'special_talents')
    op.drop_column('user_profiles', 'profile_tier')
    op.drop_column('user_profiles', 'campus_setting')
    op.drop_column('user_profiles', 'renewable_scholarships_only')
    op.drop_column('user_profiles', 'research_opportunities_important')
    op.drop_column('user_profiles', 'act_science')
    op.drop_column('user_profiles', 'parent_employer')
    op.drop_column('user_profiles', 'last_matching_update')
    op.drop_column('user_profiles', 'sports_activities')
    op.drop_column('user_profiles', 'rural_background')
    op.drop_column('user_profiles', 'ap_courses')
    op.drop_column('user_profiles', 'has_challenges_essay')
    op.drop_column('user_profiles', 'first_generation_college')
    op.drop_column('user_profiles', 'act_english')
    op.drop_column('user_profiles', 'preferred_states')
    op.drop_column('user_profiles', 'date_of_birth')
    op.drop_column('user_profiles', 'household_income_range')
    op.drop_column('user_profiles', 'lgbtq_identification')
    op.drop_column('user_profiles', 'languages_spoken')
    op.drop_column('user_profiles', 'financial_aid_needed')
    op.drop_column('user_profiles', 'military_connection')
    op.drop_column('user_profiles', 'max_tuition_budget')
    op.drop_column('user_profiles', 'parent_education_level')
    op.drop_column('user_profiles', 'dual_enrollment')
    op.drop_column('user_profiles', 'leadership_positions')
    op.drop_column('user_profiles', 'local_scholarships_priority')
    op.drop_column('user_profiles', 'ethnicity')
    op.drop_column('user_profiles', 'work_study_interest')
    op.drop_column('user_profiles', 'act_reading')
    op.drop_column('user_profiles', 'parent_occupation')
    op.drop_column('user_profiles', 'work_experience')
    op.drop_column('user_profiles', 'family_size')
    op.drop_column('user_profiles', 'act_math')
    op.drop_column('user_profiles', 'scholarship_types_interested')
    op.drop_column('user_profiles', 'preferred_college_size')
    op.drop_column('user_profiles', 'minor_interests')
    op.drop_column('user_profiles', 'honors_courses')
    op.drop_column('user_profiles', 'completed_at')
    op.drop_column('user_profiles', 'profile_completed')
    op.drop_column('user_profiles', 'arts_activities')
    op.drop_column('user_profiles', 'awards_honors')
    op.drop_column('user_profiles', 'secondary_major')
    op.drop_column('user_profiles', 'career_goals')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_profiles', sa.Column('career_goals', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('secondary_major', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('awards_honors', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('arts_activities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('profile_completed', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('honors_courses', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('minor_interests', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('preferred_college_size', postgresql.ENUM('VERY_SMALL', 'SMALL', 'MEDIUM', 'LARGE', 'VERY_LARGE', 'NO_PREFERENCE', name='collegesize'), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('scholarship_types_interested', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('act_math', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('family_size', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('work_experience', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('parent_occupation', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('act_reading', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('work_study_interest', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('ethnicity', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('local_scholarships_priority', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('leadership_positions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('dual_enrollment', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('parent_education_level', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('max_tuition_budget', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('military_connection', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('financial_aid_needed', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('languages_spoken', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('lgbtq_identification', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('household_income_range', postgresql.ENUM('UNDER_30K', 'RANGE_30K_50K', 'RANGE_50K_75K', 'RANGE_75K_100K', 'RANGE_100K_150K', 'OVER_150K', 'PREFER_NOT_TO_SAY', name='incomerange'), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('date_of_birth', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('preferred_states', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('act_english', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('first_generation_college', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('has_challenges_essay', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('ap_courses', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('rural_background', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('sports_activities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('last_matching_update', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('parent_employer', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('act_science', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('research_opportunities_important', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('renewable_scholarships_only', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('campus_setting', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('profile_tier', sa.VARCHAR(length=20), server_default=sa.text("'basic'::character varying"), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('special_talents', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('academic_interests', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('study_abroad_interest', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('volunteer_experience', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('completion_percentage', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('sat_verbal', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('has_diversity_essay', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('volunteer_hours', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('competitions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('religious_affiliation', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('gender', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('min_scholarship_amount', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('greek_life_interest', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('has_leadership_essay', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('college_application_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('additional_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('has_academic_interest_essay', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('application_deadline_preference', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('disability_status', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('has_community_service_essay', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('extracurricular_activities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('sat_math', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('class_size', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('certifications', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('musical_instruments', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('class_rank', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('has_personal_statement', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.create_index('ix_user_profiles_zip_code', 'user_profiles', ['zip_code'], unique=False)
    op.create_index('ix_user_profiles_sat_score', 'user_profiles', ['sat_score'], unique=False)
    op.create_index('ix_user_profiles_intended_major', 'user_profiles', ['intended_major'], unique=False)
    op.create_index('ix_user_profiles_household_income_range', 'user_profiles', ['household_income_range'], unique=False)
    op.create_index('ix_user_profiles_high_school_name', 'user_profiles', ['high_school_name'], unique=False)
    op.create_index('ix_user_profiles_gpa', 'user_profiles', ['gpa'], unique=False)
    op.create_index('ix_user_profiles_first_generation_college', 'user_profiles', ['first_generation_college'], unique=False)
    op.create_index('ix_user_profiles_city', 'user_profiles', ['city'], unique=False)
    op.create_index('ix_user_profiles_act_score', 'user_profiles', ['act_score'], unique=False)
    op.alter_column('user_profiles', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('user_profiles', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_profiles', 'state',
               existing_type=sa.String(length=2),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    # ### end Alembic commands ###
