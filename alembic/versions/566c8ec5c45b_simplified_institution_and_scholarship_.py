"""simplified institution and scholarship schemas

Revision ID: 566c8ec5c45b
Revises: 5f8b497f5899
Create Date: 2025-10-03 04:20:01.544769

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '566c8ec5c45b'
down_revision: Union[str, None] = '5f8b497f5899'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_scholarship_matches_id', table_name='scholarship_matches')
    op.drop_index('ix_scholarship_matches_scholarship_id', table_name='scholarship_matches')
    op.drop_index('ix_scholarship_matches_user_id', table_name='scholarship_matches')
    op.drop_table('scholarship_matches')
    op.alter_column('institutions', 'primary_image_url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='CDN URL to standardized 400x300px image for school cards',
               existing_nullable=True)
    op.drop_index('idx_institution_control_size', table_name='institutions')
    op.drop_index('idx_institution_customer_rank', table_name='institutions')
    op.drop_index('idx_institution_image_quality', table_name='institutions')
    op.drop_index('idx_institution_name', table_name='institutions')
    op.drop_index('ix_institutions_customer_rank', table_name='institutions')
    op.drop_index('ix_institutions_image_extraction_status', table_name='institutions')
    op.drop_index('ix_institutions_primary_image_quality_score', table_name='institutions')
    op.drop_index('ix_institutions_region', table_name='institutions')
    op.drop_index('ix_institutions_size_category', table_name='institutions')
    op.drop_column('institutions', 'phone')
    op.drop_column('institutions', 'president_title')
    op.drop_column('institutions', 'image_extraction_date')
    op.drop_column('institutions', 'address')
    op.drop_column('institutions', 'image_extraction_status')
    op.drop_column('institutions', 'logo_image_url')
    op.drop_column('institutions', 'primary_image_quality_score')
    op.drop_column('institutions', 'customer_rank')
    op.drop_column('institutions', 'region')
    op.drop_column('institutions', 'website')
    op.drop_column('institutions', 'zip_code')
    op.drop_column('institutions', 'size_category')
    op.drop_column('institutions', 'president_name')
    op.alter_column('scholarships', 'amount_exact',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('scholarships', 'is_renewable',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'need_based_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'international_students_eligible',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'leadership_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'work_experience_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'military_affiliation_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'essay_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'transcript_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'recommendation_letters_required',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('scholarships', 'portfolio_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'interview_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'personal_statement_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'leadership_essay_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'community_service_essay_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'is_rolling_deadline',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'primary_image_url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='CDN URL to standardized scholarship card image',
               existing_nullable=True)
    op.alter_column('scholarships', 'verified',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'featured',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('scholarships', 'views_count',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('scholarships', 'applications_count',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index('ix_scholarships_image_extraction_status', table_name='scholarships')
    op.drop_index('ix_scholarships_primary_image_quality_score', table_name='scholarships')
    op.drop_constraint('scholarships_created_by_fkey', 'scholarships', type_='foreignkey')
    op.drop_column('scholarships', 'deadline')
    op.drop_column('scholarships', 'min_sat_score')
    op.drop_column('scholarships', 'languages_preferred')
    op.drop_column('scholarships', 'excluded_majors')
    op.drop_column('scholarships', 'number_of_awards')
    op.drop_column('scholarships', 'eligible_schools')
    op.drop_column('scholarships', 'description')
    op.drop_column('scholarships', 'required_activities')
    op.drop_column('scholarships', 'gender_requirements')
    op.drop_column('scholarships', 'graduation_year_max')
    op.drop_column('scholarships', 'eligible_counties')
    op.drop_column('scholarships', 'min_act_score')
    op.drop_column('scholarships', 'eligible_cities')
    op.drop_column('scholarships', 'eligible_states')
    op.drop_column('scholarships', 'essay_word_limit')
    op.drop_column('scholarships', 'zip_codes')
    op.drop_column('scholarships', 'eligible_ethnicities')
    op.drop_column('scholarships', 'amount_min')
    op.drop_column('scholarships', 'employer_affiliation')
    op.drop_column('scholarships', 'high_school_names')
    op.drop_column('scholarships', 'graduation_year_min')
    op.drop_column('scholarships', 'special_talents')
    op.drop_column('scholarships', 'matching_keywords')
    op.drop_column('scholarships', 'award_date')
    op.drop_column('scholarships', 'verification_notes')
    op.drop_column('scholarships', 'renewal_years')
    op.drop_column('scholarships', 'image_extraction_status')
    op.drop_column('scholarships', 'amount_max')
    op.drop_column('scholarships', 'logo_image_url')
    op.drop_column('scholarships', 'volunteer_hours_min')
    op.drop_column('scholarships', 'primary_image_quality_score')
    op.drop_column('scholarships', 'income_min')
    op.drop_column('scholarships', 'academic_level')
    op.drop_column('scholarships', 'application_url')
    op.drop_column('scholarships', 'max_gpa')
    op.drop_column('scholarships', 'income_max')
    op.drop_column('scholarships', 'created_by')
    op.drop_column('scholarships', 'essay_topics')
    op.drop_column('scholarships', 'categories')
    op.drop_column('scholarships', 'ai_generated_summary')
    op.drop_column('scholarships', 'min_gpa')
    op.drop_column('scholarships', 'image_extraction_date')
    op.drop_column('scholarships', 'last_verified_at')
    op.drop_column('scholarships', 'required_majors')
    op.drop_column('scholarships', 'website_url')
    op.drop_column('scholarships', 'application_opens')
    op.drop_column('scholarships', 'first_generation_college_required')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('scholarships', sa.Column('first_generation_college_required', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('application_opens', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('website_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('required_majors', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('last_verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('image_extraction_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='When images were last extracted/updated'))
    op.add_column('scholarships', sa.Column('min_gpa', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('ai_generated_summary', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('categories', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('essay_topics', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('income_max', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('max_gpa', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('application_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('academic_level', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('income_min', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('primary_image_quality_score', sa.INTEGER(), autoincrement=False, nullable=True, comment='Quality score 0-100 for ranking scholarships by image quality'))
    op.add_column('scholarships', sa.Column('volunteer_hours_min', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('logo_image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='CDN URL to organization logo'))
    op.add_column('scholarships', sa.Column('amount_max', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('image_extraction_status', postgresql.ENUM('PENDING', 'PROCESSING', 'SUCCESS', 'FAILED', 'NEEDS_REVIEW', 'FALLBACK_APPLIED', name='imageextractionstatus'), autoincrement=False, nullable=True, comment='Status of image extraction process'))
    op.add_column('scholarships', sa.Column('renewal_years', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('verification_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('award_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('matching_keywords', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('special_talents', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('graduation_year_min', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('high_school_names', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('employer_affiliation', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('amount_min', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('eligible_ethnicities', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('zip_codes', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('essay_word_limit', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('eligible_states', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('eligible_cities', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('min_act_score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('eligible_counties', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('graduation_year_max', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('gender_requirements', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('required_activities', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('eligible_schools', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('number_of_awards', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('excluded_majors', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('languages_preferred', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('min_sat_score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scholarships', sa.Column('deadline', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.create_foreign_key('scholarships_created_by_fkey', 'scholarships', 'users', ['created_by'], ['id'])
    op.create_index('ix_scholarships_primary_image_quality_score', 'scholarships', ['primary_image_quality_score'], unique=False)
    op.create_index('ix_scholarships_image_extraction_status', 'scholarships', ['image_extraction_status'], unique=False)
    op.alter_column('scholarships', 'applications_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('scholarships', 'views_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('scholarships', 'featured',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'verified',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'primary_image_url',
               existing_type=sa.VARCHAR(length=500),
               comment='CDN URL to standardized scholarship card image',
               existing_nullable=True)
    op.alter_column('scholarships', 'is_rolling_deadline',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'community_service_essay_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'leadership_essay_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'personal_statement_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'interview_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'portfolio_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'recommendation_letters_required',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('scholarships', 'transcript_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'essay_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'military_affiliation_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'work_experience_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'leadership_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'international_students_eligible',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'need_based_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'is_renewable',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('scholarships', 'amount_exact',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('institutions', sa.Column('president_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('institutions', sa.Column('size_category', postgresql.ENUM('VERY_SMALL', 'SMALL', 'MEDIUM', 'LARGE', 'VERY_LARGE', name='sizecategory'), autoincrement=False, nullable=True))
    op.add_column('institutions', sa.Column('zip_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.add_column('institutions', sa.Column('website', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('institutions', sa.Column('region', postgresql.ENUM('NEW_ENGLAND', 'MID_ATLANTIC', 'EAST_NORTH_CENTRAL', 'WEST_NORTH_CENTRAL', 'SOUTH_ATLANTIC', 'EAST_SOUTH_CENTRAL', 'WEST_SOUTH_CENTRAL', 'MOUNTAIN', 'PACIFIC', name='usregion'), autoincrement=False, nullable=True))
    op.add_column('institutions', sa.Column('customer_rank', sa.INTEGER(), autoincrement=False, nullable=True, comment='Customer ranking for advertising priority (higher = better placement)'))
    op.add_column('institutions', sa.Column('primary_image_quality_score', sa.INTEGER(), autoincrement=False, nullable=True, comment='Quality score 0-100 for ranking schools by image quality'))
    op.add_column('institutions', sa.Column('logo_image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='CDN URL to school logo for headers/search results'))
    op.add_column('institutions', sa.Column('image_extraction_status', postgresql.ENUM('PENDING', 'PROCESSING', 'SUCCESS', 'FAILED', 'NEEDS_REVIEW', 'FALLBACK_APPLIED', name='imageextractionstatus'), autoincrement=False, nullable=True, comment='Status of image extraction process'))
    op.add_column('institutions', sa.Column('address', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('institutions', sa.Column('image_extraction_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='When images were last extracted/updated'))
    op.add_column('institutions', sa.Column('president_title', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('institutions', sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.create_index('ix_institutions_size_category', 'institutions', ['size_category'], unique=False)
    op.create_index('ix_institutions_region', 'institutions', ['region'], unique=False)
    op.create_index('ix_institutions_primary_image_quality_score', 'institutions', ['primary_image_quality_score'], unique=False)
    op.create_index('ix_institutions_image_extraction_status', 'institutions', ['image_extraction_status'], unique=False)
    op.create_index('ix_institutions_customer_rank', 'institutions', ['customer_rank'], unique=False)
    op.create_index('idx_institution_name', 'institutions', ['name'], unique=False)
    op.create_index('idx_institution_image_quality', 'institutions', ['primary_image_quality_score'], unique=False)
    op.create_index('idx_institution_customer_rank', 'institutions', ['customer_rank'], unique=False)
    op.create_index('idx_institution_control_size', 'institutions', ['control_type', 'size_category'], unique=False)
    op.alter_column('institutions', 'primary_image_url',
               existing_type=sa.VARCHAR(length=500),
               comment='CDN URL to standardized 400x300px image for school cards',
               existing_nullable=True)
    op.create_table('scholarship_matches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('scholarship_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('match_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('match_reasons', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mismatch_reasons', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('viewed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('interested', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('applied', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('bookmarked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('application_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('match_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('viewed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scholarship_id'], ['scholarships.id'], name='scholarship_matches_scholarship_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='scholarship_matches_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='scholarship_matches_pkey')
    )
    op.create_index('ix_scholarship_matches_user_id', 'scholarship_matches', ['user_id'], unique=False)
    op.create_index('ix_scholarship_matches_scholarship_id', 'scholarship_matches', ['scholarship_id'], unique=False)
    op.create_index('ix_scholarship_matches_id', 'scholarship_matches', ['id'], unique=False)
    # ### end Alembic commands ###
