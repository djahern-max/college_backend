"""drop_unused_tables

Revision ID: 5f8b497f5899
Revises: e522998fd68b
Create Date: 2025-10-03 04:02:59.542461

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5f8b497f5899'
down_revision: Union[str, None] = 'e522998fd68b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_essay_ai_interactions_essay_id', table_name='essay_ai_interactions')
    op.drop_index('ix_essay_ai_interactions_id', table_name='essay_ai_interactions')
    op.drop_index('ix_essay_ai_interactions_user_id', table_name='essay_ai_interactions')
    op.drop_table('essay_ai_interactions')
    op.drop_index('ix_institution_matches_id', table_name='institution_matches')
    op.drop_index('ix_institution_matches_institution_id', table_name='institution_matches')
    op.drop_index('ix_institution_matches_user_id', table_name='institution_matches')
    op.drop_table('institution_matches')
    op.drop_index('ix_essays_essay_type', table_name='essays')
    op.drop_index('ix_essays_id', table_name='essays')
    op.drop_index('ix_essays_user_id', table_name='essays')
    op.drop_table('essays')
    op.drop_index('ix_essay_templates_id', table_name='essay_templates')
    op.drop_table('essay_templates')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('essay_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('essay_type', postgresql.ENUM('PERSONAL_STATEMENT', 'SUPPLEMENTAL', 'SCHOLARSHIP_SPECIFIC', 'LEADERSHIP', 'CHALLENGES_OVERCOME', 'WHY_MAJOR', 'WHY_SCHOOL', 'COMMUNITY_SERVICE', 'DIVERSITY', 'CUSTOM', name='essaytype'), autoincrement=False, nullable=False),
    sa.Column('prompt_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('word_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('character_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('school_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('scholarship_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('application_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='essay_templates_pkey')
    )
    op.create_index('ix_essay_templates_id', 'essay_templates', ['id'], unique=False)
    op.create_table('essays',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('essays_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('essay_type', postgresql.ENUM('PERSONAL_STATEMENT', 'SUPPLEMENTAL', 'SCHOLARSHIP_SPECIFIC', 'LEADERSHIP', 'CHALLENGES_OVERCOME', 'WHY_MAJOR', 'WHY_SCHOOL', 'COMMUNITY_SERVICE', 'DIVERSITY', 'CUSTOM', name='essaytype'), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('word_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('word_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'IN_PROGRESS', 'AI_REVIEW_REQUESTED', 'AI_REVIEWED', 'PEER_REVIEW', 'MENTOR_REVIEW', 'FINAL', 'SUBMITTED', name='essaystatus'), autoincrement=False, nullable=False),
    sa.Column('is_primary', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ai_feedback_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_ai_review_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('ai_suggestions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_essay_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('target_schools', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_scholarships', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deadline', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_essay_id'], ['essays.id'], name='essays_parent_essay_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='essays_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='essays_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_essays_user_id', 'essays', ['user_id'], unique=False)
    op.create_index('ix_essays_id', 'essays', ['id'], unique=False)
    op.create_index('ix_essays_essay_type', 'essays', ['essay_type'], unique=False)
    op.create_table('institution_matches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('institution_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('match_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('match_reasons', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mismatch_reasons', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('interested', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('applied', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('admitted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('enrolled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('visited', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('application_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('match_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['institution_id'], ['institutions.id'], name='institution_matches_institution_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='institution_matches_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='institution_matches_pkey')
    )
    op.create_index('ix_institution_matches_user_id', 'institution_matches', ['user_id'], unique=False)
    op.create_index('ix_institution_matches_institution_id', 'institution_matches', ['institution_id'], unique=False)
    op.create_index('ix_institution_matches_id', 'institution_matches', ['id'], unique=False)
    op.create_table('essay_ai_interactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('essay_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('interaction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('ai_model', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('user_request', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ai_response', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('was_helpful', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['essay_id'], ['essays.id'], name='essay_ai_interactions_essay_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='essay_ai_interactions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='essay_ai_interactions_pkey')
    )
    op.create_index('ix_essay_ai_interactions_user_id', 'essay_ai_interactions', ['user_id'], unique=False)
    op.create_index('ix_essay_ai_interactions_id', 'essay_ai_interactions', ['id'], unique=False)
    op.create_index('ix_essay_ai_interactions_essay_id', 'essay_ai_interactions', ['essay_id'], unique=False)
    # ### end Alembic commands ###
