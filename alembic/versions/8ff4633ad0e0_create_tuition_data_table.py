"""create_tuition_data_table

Revision ID: 8ff4633ad0e0
Revises: 9e2866c819c9
Create Date: 2025-09-18 05:01:44.732926

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "8ff4633ad0e0"
down_revision: Union[str, None] = "9e2866c819c9"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tuition_data",
        sa.Column("id", sa.Integer(), nullable=False, comment="Primary key"),
        sa.Column(
            "ipeds_id",
            sa.Integer(),
            nullable=False,
            comment="Institution IPEDS ID (foreign key)",
        ),
        sa.Column(
            "academic_year",
            sa.String(length=10),
            nullable=False,
            comment='Academic year (e.g., "2023-24")',
        ),
        sa.Column(
            "data_source",
            sa.String(length=50),
            nullable=False,
            comment='Source of the data (e.g., "IPEDS", "Manual")',
        ),
        sa.Column(
            "tuition_in_state",
            sa.Float(),
            nullable=True,
            comment="In-state tuition cost",
        ),
        sa.Column(
            "tuition_out_state",
            sa.Float(),
            nullable=True,
            comment="Out-of-state tuition cost",
        ),
        sa.Column(
            "required_fees_in_state",
            sa.Float(),
            nullable=True,
            comment="Required fees for in-state students",
        ),
        sa.Column(
            "required_fees_out_state",
            sa.Float(),
            nullable=True,
            comment="Required fees for out-of-state students",
        ),
        sa.Column(
            "tuition_fees_in_state",
            sa.Float(),
            nullable=True,
            comment="Total tuition + fees for in-state",
        ),
        sa.Column(
            "tuition_fees_out_state",
            sa.Float(),
            nullable=True,
            comment="Total tuition + fees for out-of-state",
        ),
        sa.Column(
            "room_board_on_campus",
            sa.Float(),
            nullable=True,
            comment="Room and board costs on campus",
        ),
        sa.Column(
            "room_board_off_campus",
            sa.Float(),
            nullable=True,
            comment="Room and board costs off campus",
        ),
        sa.Column(
            "books_supplies",
            sa.Float(),
            nullable=True,
            comment="Books and supplies cost",
        ),
        sa.Column(
            "personal_expenses",
            sa.Float(),
            nullable=True,
            comment="Personal/miscellaneous expenses",
        ),
        sa.Column(
            "transportation", sa.Float(), nullable=True, comment="Transportation costs"
        ),
        sa.Column(
            "has_tuition_data",
            sa.Boolean(),
            nullable=False,
            comment="Whether tuition data is available",
        ),
        sa.Column(
            "has_fees_data",
            sa.Boolean(),
            nullable=False,
            comment="Whether fee data is available",
        ),
        sa.Column(
            "has_living_data",
            sa.Boolean(),
            nullable=False,
            comment="Whether living expense data is available",
        ),
        sa.Column(
            "data_completeness_score",
            sa.Integer(),
            nullable=False,
            comment="Data completeness score (0-100)",
        ),
        sa.Column(
            "validation_status",
            sa.Enum(
                "PENDING",
                "VALIDATED",
                "NEEDS_REVIEW",
                "FAILED",
                name="validationstatus",
            ),
            nullable=False,
            comment="Data validation status",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Record creation timestamp",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Record last update timestamp",
        ),
        sa.ForeignKeyConstraint(
            ["ipeds_id"], ["institutions.ipeds_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "ipeds_id",
            "academic_year",
            "data_source",
            name="uq_tuition_institution_year_source",
        ),
        comment="Tuition and financial data for institutions",
    )
    op.create_index(
        op.f("ix_tuition_data_academic_year"),
        "tuition_data",
        ["academic_year"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tuition_data_data_completeness_score"),
        "tuition_data",
        ["data_completeness_score"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tuition_data_data_source"),
        "tuition_data",
        ["data_source"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tuition_data_has_fees_data"),
        "tuition_data",
        ["has_fees_data"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tuition_data_has_living_data"),
        "tuition_data",
        ["has_living_data"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tuition_data_has_tuition_data"),
        "tuition_data",
        ["has_tuition_data"],
        unique=False,
    )
    op.create_index(op.f("ix_tuition_data_id"), "tuition_data", ["id"], unique=False)
    op.create_index(
        op.f("ix_tuition_data_ipeds_id"), "tuition_data", ["ipeds_id"], unique=False
    )
    op.create_index(
        op.f("ix_tuition_data_tuition_fees_in_state"),
        "tuition_data",
        ["tuition_fees_in_state"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tuition_data_tuition_fees_out_state"),
        "tuition_data",
        ["tuition_fees_out_state"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tuition_data_tuition_in_state"),
        "tuition_data",
        ["tuition_in_state"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tuition_data_tuition_out_state"),
        "tuition_data",
        ["tuition_out_state"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tuition_data_validation_status"),
        "tuition_data",
        ["validation_status"],
        unique=False,
    )
    op.create_index(
        "ix_tuition_data_ipeds_academic_year",
        "tuition_data",
        ["ipeds_id", "academic_year"],
    )
    op.create_index(
        "ix_tuition_data_has_data_flags",
        "tuition_data",
        ["has_tuition_data", "has_fees_data", "has_living_data"],
    )
    op.create_index(
        "ix_tuition_data_quality_validation",
        "tuition_data",
        ["data_completeness_score", "validation_status"],
    )
    op.drop_index("ix_step2_ic2023_ay_id", table_name="step2_ic2023_ay")
    op.drop_index("ix_step2_ic2023_ay_ipeds_id", table_name="step2_ic2023_ay")
    op.drop_table("step2_ic2023_ay")
    op.drop_index("ix_s2023_is_id", table_name="s2023_is")
    op.drop_index("ix_s2023_is_unitid", table_name="s2023_is")
    op.drop_table("s2023_is")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "s2023_is",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("unitid", sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column("total_faculty", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "female_faculty_percent",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "male_faculty_percent",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "diversity_category",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "faculty_size_category",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "faculty_description", sa.TEXT(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "diversity_index",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "asian_faculty_percent",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "black_faculty_percent",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "hispanic_faculty_percent",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "white_faculty_percent",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="s2023_is_pkey"),
    )
    op.create_index("ix_s2023_is_unitid", "s2023_is", ["unitid"], unique=False)
    op.create_index("ix_s2023_is_id", "s2023_is", ["id"], unique=False)
    op.create_table(
        "step2_ic2023_ay",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("ipeds_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "academic_year", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column(
            "data_source", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "tuition_in_state",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "tuition_out_state",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "required_fees",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "tuition_fees_in_state",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "tuition_fees_out_state",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "room_board_on_campus",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "room_board_off_campus",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "books_supplies",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "personal_expenses",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "transportation",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("has_tuition_data", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("has_fees_data", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "data_completeness_score", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("validation_issues", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "validation_status",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["ipeds_id"],
            ["institutions.ipeds_id"],
            name="step2_ic2023_ay_ipeds_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="step2_ic2023_ay_pkey"),
    )
    op.create_index(
        "ix_step2_ic2023_ay_ipeds_id", "step2_ic2023_ay", ["ipeds_id"], unique=False
    )
    op.create_index("ix_step2_ic2023_ay_id", "step2_ic2023_ay", ["id"], unique=False)
    op.drop_index(op.f("ix_tuition_data_validation_status"), table_name="tuition_data")
    op.drop_index(op.f("ix_tuition_data_tuition_out_state"), table_name="tuition_data")
    op.drop_index(op.f("ix_tuition_data_tuition_in_state"), table_name="tuition_data")
    op.drop_index(
        op.f("ix_tuition_data_tuition_fees_out_state"), table_name="tuition_data"
    )
    op.drop_index(
        op.f("ix_tuition_data_tuition_fees_in_state"), table_name="tuition_data"
    )
    op.drop_index(op.f("ix_tuition_data_ipeds_id"), table_name="tuition_data")
    op.drop_index(op.f("ix_tuition_data_id"), table_name="tuition_data")
    op.drop_index(op.f("ix_tuition_data_has_tuition_data"), table_name="tuition_data")
    op.drop_index(op.f("ix_tuition_data_has_living_data"), table_name="tuition_data")
    op.drop_index(op.f("ix_tuition_data_has_fees_data"), table_name="tuition_data")
    op.drop_index(op.f("ix_tuition_data_data_source"), table_name="tuition_data")
    op.drop_index(
        op.f("ix_tuition_data_data_completeness_score"), table_name="tuition_data"
    )
    op.drop_index(op.f("ix_tuition_data_academic_year"), table_name="tuition_data")
    op.drop_table("tuition_data")
    # ### end Alembic commands ###
