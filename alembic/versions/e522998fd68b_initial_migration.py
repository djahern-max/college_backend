"""Initial Migration

Revision ID: e522998fd68b
Revises: 
Create Date: 2025-10-01 03:31:52.047167

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e522998fd68b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('essay_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('essay_type', sa.Enum('PERSONAL_STATEMENT', 'SUPPLEMENTAL', 'SCHOLARSHIP_SPECIFIC', 'LEADERSHIP', 'CHALLENGES_OVERCOME', 'WHY_MAJOR', 'WHY_SCHOOL', 'COMMUNITY_SERVICE', 'DIVERSITY', 'CUSTOM', name='essaytype'), nullable=False),
    sa.Column('prompt_text', sa.Text(), nullable=False),
    sa.Column('word_limit', sa.Integer(), nullable=True),
    sa.Column('character_limit', sa.Integer(), nullable=True),
    sa.Column('school_name', sa.String(length=255), nullable=True),
    sa.Column('scholarship_name', sa.String(length=255), nullable=True),
    sa.Column('application_year', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_essay_templates_id'), 'essay_templates', ['id'], unique=False)
    op.create_table('institutions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ipeds_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=False),
    sa.Column('state', sa.String(length=2), nullable=False),
    sa.Column('zip_code', sa.String(length=10), nullable=True),
    sa.Column('region', sa.Enum('NEW_ENGLAND', 'MID_ATLANTIC', 'EAST_NORTH_CENTRAL', 'WEST_NORTH_CENTRAL', 'SOUTH_ATLANTIC', 'EAST_SOUTH_CENTRAL', 'WEST_SOUTH_CENTRAL', 'MOUNTAIN', 'PACIFIC', name='usregion'), nullable=True),
    sa.Column('website', sa.String(length=500), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('president_name', sa.String(length=255), nullable=True),
    sa.Column('president_title', sa.String(length=100), nullable=True),
    sa.Column('control_type', sa.Enum('PUBLIC', 'PRIVATE_NONPROFIT', 'PRIVATE_FOR_PROFIT', name='controltype'), nullable=False),
    sa.Column('size_category', sa.Enum('VERY_SMALL', 'SMALL', 'MEDIUM', 'LARGE', 'VERY_LARGE', name='sizecategory'), nullable=True),
    sa.Column('primary_image_url', sa.String(length=500), nullable=True, comment='CDN URL to standardized 400x300px image for school cards'),
    sa.Column('primary_image_quality_score', sa.Integer(), nullable=True, comment='Quality score 0-100 for ranking schools by image quality'),
    sa.Column('customer_rank', sa.Integer(), nullable=True, comment='Customer ranking for advertising priority (higher = better placement)'),
    sa.Column('logo_image_url', sa.String(length=500), nullable=True, comment='CDN URL to school logo for headers/search results'),
    sa.Column('image_extraction_status', sa.Enum('PENDING', 'PROCESSING', 'SUCCESS', 'FAILED', 'NEEDS_REVIEW', 'FALLBACK_APPLIED', name='imageextractionstatus'), nullable=True, comment='Status of image extraction process'),
    sa.Column('image_extraction_date', sa.DateTime(), nullable=True, comment='When images were last extracted/updated'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_institution_control_size', 'institutions', ['control_type', 'size_category'], unique=False)
    op.create_index('idx_institution_customer_rank', 'institutions', ['customer_rank'], unique=False)
    op.create_index('idx_institution_image_quality', 'institutions', ['primary_image_quality_score'], unique=False)
    op.create_index('idx_institution_name', 'institutions', ['name'], unique=False)
    op.create_index('idx_institution_state_city', 'institutions', ['state', 'city'], unique=False)
    op.create_index(op.f('ix_institutions_city'), 'institutions', ['city'], unique=False)
    op.create_index(op.f('ix_institutions_control_type'), 'institutions', ['control_type'], unique=False)
    op.create_index(op.f('ix_institutions_customer_rank'), 'institutions', ['customer_rank'], unique=False)
    op.create_index(op.f('ix_institutions_id'), 'institutions', ['id'], unique=False)
    op.create_index(op.f('ix_institutions_image_extraction_status'), 'institutions', ['image_extraction_status'], unique=False)
    op.create_index(op.f('ix_institutions_ipeds_id'), 'institutions', ['ipeds_id'], unique=True)
    op.create_index(op.f('ix_institutions_name'), 'institutions', ['name'], unique=False)
    op.create_index(op.f('ix_institutions_primary_image_quality_score'), 'institutions', ['primary_image_quality_score'], unique=False)
    op.create_index(op.f('ix_institutions_region'), 'institutions', ['region'], unique=False)
    op.create_index(op.f('ix_institutions_size_category'), 'institutions', ['size_category'], unique=False)
    op.create_index(op.f('ix_institutions_state'), 'institutions', ['state'], unique=False)
    op.create_table('oauth_states',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('state', sa.String(length=255), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('used', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_oauth_states_id'), 'oauth_states', ['id'], unique=False)
    op.create_index(op.f('ix_oauth_states_state'), 'oauth_states', ['state'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('essays',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('essay_type', sa.Enum('PERSONAL_STATEMENT', 'SUPPLEMENTAL', 'SCHOLARSHIP_SPECIFIC', 'LEADERSHIP', 'CHALLENGES_OVERCOME', 'WHY_MAJOR', 'WHY_SCHOOL', 'COMMUNITY_SERVICE', 'DIVERSITY', 'CUSTOM', name='essaytype'), nullable=False),
    sa.Column('prompt', sa.Text(), nullable=True),
    sa.Column('word_limit', sa.Integer(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('word_count', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'IN_PROGRESS', 'AI_REVIEW_REQUESTED', 'AI_REVIEWED', 'PEER_REVIEW', 'MENTOR_REVIEW', 'FINAL', 'SUBMITTED', name='essaystatus'), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('ai_feedback_count', sa.Integer(), nullable=True),
    sa.Column('last_ai_review_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ai_suggestions', sa.JSON(), nullable=True),
    sa.Column('ai_score', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('parent_essay_id', sa.Integer(), nullable=True),
    sa.Column('target_schools', sa.JSON(), nullable=True),
    sa.Column('target_scholarships', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deadline', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['parent_essay_id'], ['essays.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_essays_essay_type'), 'essays', ['essay_type'], unique=False)
    op.create_index(op.f('ix_essays_id'), 'essays', ['id'], unique=False)
    op.create_index(op.f('ix_essays_user_id'), 'essays', ['user_id'], unique=False)
    op.create_table('institution_matches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('institution_id', sa.Integer(), nullable=False),
    sa.Column('match_score', sa.Float(), nullable=False),
    sa.Column('match_reasons', sa.JSON(), nullable=True),
    sa.Column('mismatch_reasons', sa.JSON(), nullable=True),
    sa.Column('interested', sa.Boolean(), nullable=True),
    sa.Column('applied', sa.Boolean(), nullable=True),
    sa.Column('admitted', sa.Boolean(), nullable=True),
    sa.Column('enrolled', sa.Boolean(), nullable=True),
    sa.Column('visited', sa.Boolean(), nullable=True),
    sa.Column('application_status', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('match_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['institution_id'], ['institutions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_institution_matches_id'), 'institution_matches', ['id'], unique=False)
    op.create_index(op.f('ix_institution_matches_institution_id'), 'institution_matches', ['institution_id'], unique=False)
    op.create_index(op.f('ix_institution_matches_user_id'), 'institution_matches', ['user_id'], unique=False)
    op.create_table('oauth_accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('provider_user_id', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('access_token', sa.Text(), nullable=True),
    sa.Column('refresh_token', sa.Text(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('profile_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_oauth_accounts_id'), 'oauth_accounts', ['id'], unique=False)
    op.create_table('scholarships',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('organization', sa.String(length=255), nullable=False),
    sa.Column('website_url', sa.String(length=500), nullable=True),
    sa.Column('application_url', sa.String(length=500), nullable=True),
    sa.Column('scholarship_type', sa.Enum('ACADEMIC_MERIT', 'NEED_BASED', 'ATHLETIC', 'STEM', 'ARTS', 'DIVERSITY', 'FIRST_GENERATION', 'COMMUNITY_SERVICE', 'LEADERSHIP', 'LOCAL_COMMUNITY', 'EMPLOYER_SPONSORED', 'MILITARY', 'RELIGIOUS', 'CAREER_SPECIFIC', 'ESSAY_BASED', 'RENEWABLE', name='scholarshiptype'), nullable=False),
    sa.Column('categories', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'EXPIRED', 'DRAFT', 'PENDING_REVIEW', name='scholarshipstatus'), nullable=False),
    sa.Column('difficulty_level', sa.Enum('EASY', 'MODERATE', 'HARD', 'VERY_HARD', name='difficultylevel'), nullable=False),
    sa.Column('amount_min', sa.Integer(), nullable=True),
    sa.Column('amount_max', sa.Integer(), nullable=True),
    sa.Column('amount_exact', sa.Integer(), nullable=True),
    sa.Column('is_renewable', sa.Boolean(), nullable=True),
    sa.Column('renewal_years', sa.Integer(), nullable=True),
    sa.Column('number_of_awards', sa.Integer(), nullable=True),
    sa.Column('min_gpa', sa.Float(), nullable=True),
    sa.Column('max_gpa', sa.Float(), nullable=True),
    sa.Column('min_sat_score', sa.Integer(), nullable=True),
    sa.Column('min_act_score', sa.Integer(), nullable=True),
    sa.Column('required_majors', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('excluded_majors', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('academic_level', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('eligible_ethnicities', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('gender_requirements', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('first_generation_college_required', sa.Boolean(), nullable=True),
    sa.Column('income_max', sa.Integer(), nullable=True),
    sa.Column('income_min', sa.Integer(), nullable=True),
    sa.Column('need_based_required', sa.Boolean(), nullable=True),
    sa.Column('eligible_states', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('eligible_cities', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('eligible_counties', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('zip_codes', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('international_students_eligible', sa.Boolean(), nullable=True),
    sa.Column('eligible_schools', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('high_school_names', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('graduation_year_min', sa.Integer(), nullable=True),
    sa.Column('graduation_year_max', sa.Integer(), nullable=True),
    sa.Column('required_activities', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('volunteer_hours_min', sa.Integer(), nullable=True),
    sa.Column('leadership_required', sa.Boolean(), nullable=True),
    sa.Column('work_experience_required', sa.Boolean(), nullable=True),
    sa.Column('special_talents', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('essay_required', sa.Boolean(), nullable=True),
    sa.Column('essay_topics', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('essay_word_limit', sa.Integer(), nullable=True),
    sa.Column('transcript_required', sa.Boolean(), nullable=True),
    sa.Column('recommendation_letters_required', sa.Integer(), nullable=True),
    sa.Column('portfolio_required', sa.Boolean(), nullable=True),
    sa.Column('interview_required', sa.Boolean(), nullable=True),
    sa.Column('personal_statement_required', sa.Boolean(), nullable=True),
    sa.Column('leadership_essay_required', sa.Boolean(), nullable=True),
    sa.Column('community_service_essay_required', sa.Boolean(), nullable=True),
    sa.Column('application_opens', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('award_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_rolling_deadline', sa.Boolean(), nullable=True),
    sa.Column('languages_preferred', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('military_affiliation_required', sa.Boolean(), nullable=True),
    sa.Column('employer_affiliation', sa.String(length=255), nullable=True),
    sa.Column('primary_image_url', sa.String(length=500), nullable=True, comment='CDN URL to standardized scholarship card image'),
    sa.Column('primary_image_quality_score', sa.Integer(), nullable=True, comment='Quality score 0-100 for ranking scholarships by image quality'),
    sa.Column('logo_image_url', sa.String(length=500), nullable=True, comment='CDN URL to organization logo'),
    sa.Column('image_extraction_status', sa.Enum('PENDING', 'PROCESSING', 'SUCCESS', 'FAILED', 'NEEDS_REVIEW', 'FALLBACK_APPLIED', name='imageextractionstatus'), nullable=True, comment='Status of image extraction process'),
    sa.Column('image_extraction_date', sa.DateTime(timezone=True), nullable=True, comment='When images were last extracted/updated'),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('featured', sa.Boolean(), nullable=True),
    sa.Column('views_count', sa.Integer(), nullable=True),
    sa.Column('applications_count', sa.Integer(), nullable=True),
    sa.Column('ai_generated_summary', sa.Text(), nullable=True),
    sa.Column('matching_keywords', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('last_verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('verification_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scholarships_id'), 'scholarships', ['id'], unique=False)
    op.create_index(op.f('ix_scholarships_image_extraction_status'), 'scholarships', ['image_extraction_status'], unique=False)
    op.create_index(op.f('ix_scholarships_organization'), 'scholarships', ['organization'], unique=False)
    op.create_index(op.f('ix_scholarships_primary_image_quality_score'), 'scholarships', ['primary_image_quality_score'], unique=False)
    op.create_index(op.f('ix_scholarships_scholarship_type'), 'scholarships', ['scholarship_type'], unique=False)
    op.create_index(op.f('ix_scholarships_title'), 'scholarships', ['title'], unique=False)
    op.create_table('tuition_data',
    sa.Column('id', sa.Integer(), nullable=False, comment='Primary key'),
    sa.Column('ipeds_id', sa.Integer(), nullable=False, comment='Institution IPEDS ID (foreign key)'),
    sa.Column('academic_year', sa.String(length=10), nullable=False, comment='Academic year (e.g., "2023-24")'),
    sa.Column('data_source', sa.String(length=50), nullable=False, comment='Source of the data (e.g., "IPEDS", "Manual")'),
    sa.Column('tuition_in_state', sa.Float(), nullable=True, comment='In-state tuition cost'),
    sa.Column('tuition_out_state', sa.Float(), nullable=True, comment='Out-of-state tuition cost'),
    sa.Column('required_fees_in_state', sa.Float(), nullable=True, comment='Required fees for in-state students'),
    sa.Column('required_fees_out_state', sa.Float(), nullable=True, comment='Required fees for out-of-state students'),
    sa.Column('tuition_fees_in_state', sa.Float(), nullable=True, comment='Total tuition + fees for in-state'),
    sa.Column('tuition_fees_out_state', sa.Float(), nullable=True, comment='Total tuition + fees for out-of-state'),
    sa.Column('room_board_on_campus', sa.Float(), nullable=True, comment='Room and board costs on campus'),
    sa.Column('room_board_off_campus', sa.Float(), nullable=True, comment='Room and board costs off campus'),
    sa.Column('room_board_breakdown', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='JSON breakdown of room/board costs: {"housing": 9346, "meals": 5358, "total": 14704}'),
    sa.Column('books_supplies', sa.Float(), nullable=True, comment='Books and supplies cost'),
    sa.Column('personal_expenses', sa.Float(), nullable=True, comment='Personal/miscellaneous expenses'),
    sa.Column('transportation', sa.Float(), nullable=True, comment='Transportation costs'),
    sa.Column('has_tuition_data', sa.Boolean(), nullable=False, comment='Whether tuition data is available'),
    sa.Column('has_fees_data', sa.Boolean(), nullable=False, comment='Whether fee data is available'),
    sa.Column('has_living_data', sa.Boolean(), nullable=False, comment='Whether living expense data is available'),
    sa.Column('data_completeness_score', sa.Integer(), nullable=False, comment='Data completeness score (0-100)'),
    sa.Column('validation_status', sa.Enum('PENDING', 'VALIDATED', 'NEEDS_REVIEW', 'FAILED', name='validationstatus'), nullable=False, comment='Data validation status'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['ipeds_id'], ['institutions.ipeds_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ipeds_id', 'academic_year', 'data_source', name='uq_tuition_institution_year_source'),
    comment='Tuition and financial data for institutions'
    )
    op.create_index(op.f('ix_tuition_data_academic_year'), 'tuition_data', ['academic_year'], unique=False)
    op.create_index(op.f('ix_tuition_data_data_completeness_score'), 'tuition_data', ['data_completeness_score'], unique=False)
    op.create_index(op.f('ix_tuition_data_data_source'), 'tuition_data', ['data_source'], unique=False)
    op.create_index(op.f('ix_tuition_data_has_fees_data'), 'tuition_data', ['has_fees_data'], unique=False)
    op.create_index(op.f('ix_tuition_data_has_living_data'), 'tuition_data', ['has_living_data'], unique=False)
    op.create_index(op.f('ix_tuition_data_has_tuition_data'), 'tuition_data', ['has_tuition_data'], unique=False)
    op.create_index(op.f('ix_tuition_data_id'), 'tuition_data', ['id'], unique=False)
    op.create_index(op.f('ix_tuition_data_ipeds_id'), 'tuition_data', ['ipeds_id'], unique=False)
    op.create_index(op.f('ix_tuition_data_tuition_fees_in_state'), 'tuition_data', ['tuition_fees_in_state'], unique=False)
    op.create_index(op.f('ix_tuition_data_tuition_fees_out_state'), 'tuition_data', ['tuition_fees_out_state'], unique=False)
    op.create_index(op.f('ix_tuition_data_tuition_in_state'), 'tuition_data', ['tuition_in_state'], unique=False)
    op.create_index(op.f('ix_tuition_data_tuition_out_state'), 'tuition_data', ['tuition_out_state'], unique=False)
    op.create_index(op.f('ix_tuition_data_validation_status'), 'tuition_data', ['validation_status'], unique=False)
    op.create_table('user_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('high_school_name', sa.String(length=255), nullable=True),
    sa.Column('graduation_year', sa.Integer(), nullable=True),
    sa.Column('gpa', sa.Float(), nullable=True),
    sa.Column('gpa_scale', sa.String(length=10), nullable=True),
    sa.Column('intended_major', sa.String(length=255), nullable=True),
    sa.Column('state', sa.String(length=50), nullable=True),
    sa.Column('sat_score', sa.Integer(), nullable=True),
    sa.Column('act_score', sa.Integer(), nullable=True),
    sa.Column('academic_interests', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('date_of_birth', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('zip_code', sa.String(length=10), nullable=True),
    sa.Column('sat_math', sa.Integer(), nullable=True),
    sa.Column('sat_verbal', sa.Integer(), nullable=True),
    sa.Column('act_math', sa.Integer(), nullable=True),
    sa.Column('act_english', sa.Integer(), nullable=True),
    sa.Column('act_science', sa.Integer(), nullable=True),
    sa.Column('act_reading', sa.Integer(), nullable=True),
    sa.Column('secondary_major', sa.String(length=255), nullable=True),
    sa.Column('minor_interests', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('career_goals', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('ap_courses', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('honors_courses', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('dual_enrollment', sa.Boolean(), nullable=True),
    sa.Column('class_rank', sa.Integer(), nullable=True),
    sa.Column('class_size', sa.Integer(), nullable=True),
    sa.Column('extracurricular_activities', sa.JSON(), nullable=True),
    sa.Column('volunteer_experience', sa.JSON(), nullable=True),
    sa.Column('volunteer_hours', sa.Integer(), nullable=True),
    sa.Column('work_experience', sa.JSON(), nullable=True),
    sa.Column('leadership_positions', sa.JSON(), nullable=True),
    sa.Column('awards_honors', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('competitions', sa.JSON(), nullable=True),
    sa.Column('sports_activities', sa.JSON(), nullable=True),
    sa.Column('arts_activities', sa.JSON(), nullable=True),
    sa.Column('musical_instruments', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('ethnicity', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('gender', sa.String(length=50), nullable=True),
    sa.Column('first_generation_college', sa.Boolean(), nullable=True),
    sa.Column('household_income_range', sa.Enum('UNDER_30K', 'RANGE_30K_50K', 'RANGE_50K_75K', 'RANGE_75K_100K', 'RANGE_100K_150K', 'OVER_150K', 'PREFER_NOT_TO_SAY', name='incomerange'), nullable=True),
    sa.Column('family_size', sa.Integer(), nullable=True),
    sa.Column('military_connection', sa.Boolean(), nullable=True),
    sa.Column('disability_status', sa.Boolean(), nullable=True),
    sa.Column('lgbtq_identification', sa.Boolean(), nullable=True),
    sa.Column('rural_background', sa.Boolean(), nullable=True),
    sa.Column('preferred_college_size', sa.Enum('VERY_SMALL', 'SMALL', 'MEDIUM', 'LARGE', 'VERY_LARGE', 'NO_PREFERENCE', name='collegesize'), nullable=True),
    sa.Column('preferred_states', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('college_application_status', sa.String(length=50), nullable=True),
    sa.Column('max_tuition_budget', sa.Integer(), nullable=True),
    sa.Column('financial_aid_needed', sa.Boolean(), nullable=True),
    sa.Column('work_study_interest', sa.Boolean(), nullable=True),
    sa.Column('campus_setting', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('religious_affiliation', sa.String(length=100), nullable=True),
    sa.Column('greek_life_interest', sa.Boolean(), nullable=True),
    sa.Column('research_opportunities_important', sa.Boolean(), nullable=True),
    sa.Column('study_abroad_interest', sa.Boolean(), nullable=True),
    sa.Column('has_personal_statement', sa.Boolean(), nullable=True),
    sa.Column('has_leadership_essay', sa.Boolean(), nullable=True),
    sa.Column('has_challenges_essay', sa.Boolean(), nullable=True),
    sa.Column('has_diversity_essay', sa.Boolean(), nullable=True),
    sa.Column('has_community_service_essay', sa.Boolean(), nullable=True),
    sa.Column('has_academic_interest_essay', sa.Boolean(), nullable=True),
    sa.Column('scholarship_types_interested', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('application_deadline_preference', sa.String(length=50), nullable=True),
    sa.Column('min_scholarship_amount', sa.Integer(), nullable=True),
    sa.Column('renewable_scholarships_only', sa.Boolean(), nullable=True),
    sa.Column('local_scholarships_priority', sa.Boolean(), nullable=True),
    sa.Column('languages_spoken', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('special_talents', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('certifications', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('additional_notes', sa.Text(), nullable=True),
    sa.Column('parent_education_level', sa.String(length=100), nullable=True),
    sa.Column('parent_occupation', sa.String(length=100), nullable=True),
    sa.Column('parent_employer', sa.String(length=255), nullable=True),
    sa.Column('profile_tier', sa.String(length=20), server_default='basic', nullable=False),
    sa.Column('profile_completed', sa.Boolean(), nullable=False),
    sa.Column('completion_percentage', sa.Integer(), nullable=False),
    sa.Column('last_matching_update', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("profile_tier IN ('basic', 'enhanced', 'complete', 'optimized')", name='valid_profile_tier'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_profiles_act_score'), 'user_profiles', ['act_score'], unique=False)
    op.create_index(op.f('ix_user_profiles_city'), 'user_profiles', ['city'], unique=False)
    op.create_index(op.f('ix_user_profiles_first_generation_college'), 'user_profiles', ['first_generation_college'], unique=False)
    op.create_index(op.f('ix_user_profiles_gpa'), 'user_profiles', ['gpa'], unique=False)
    op.create_index(op.f('ix_user_profiles_graduation_year'), 'user_profiles', ['graduation_year'], unique=False)
    op.create_index(op.f('ix_user_profiles_high_school_name'), 'user_profiles', ['high_school_name'], unique=False)
    op.create_index(op.f('ix_user_profiles_household_income_range'), 'user_profiles', ['household_income_range'], unique=False)
    op.create_index(op.f('ix_user_profiles_id'), 'user_profiles', ['id'], unique=False)
    op.create_index(op.f('ix_user_profiles_intended_major'), 'user_profiles', ['intended_major'], unique=False)
    op.create_index(op.f('ix_user_profiles_sat_score'), 'user_profiles', ['sat_score'], unique=False)
    op.create_index(op.f('ix_user_profiles_state'), 'user_profiles', ['state'], unique=False)
    op.create_index(op.f('ix_user_profiles_user_id'), 'user_profiles', ['user_id'], unique=True)
    op.create_index(op.f('ix_user_profiles_zip_code'), 'user_profiles', ['zip_code'], unique=False)
    op.create_table('essay_ai_interactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('essay_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('interaction_type', sa.String(length=50), nullable=False),
    sa.Column('ai_model', sa.String(length=50), nullable=True),
    sa.Column('user_request', sa.Text(), nullable=True),
    sa.Column('ai_response', sa.JSON(), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('user_rating', sa.Integer(), nullable=True),
    sa.Column('was_helpful', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['essay_id'], ['essays.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_essay_ai_interactions_essay_id'), 'essay_ai_interactions', ['essay_id'], unique=False)
    op.create_index(op.f('ix_essay_ai_interactions_id'), 'essay_ai_interactions', ['id'], unique=False)
    op.create_index(op.f('ix_essay_ai_interactions_user_id'), 'essay_ai_interactions', ['user_id'], unique=False)
    op.create_table('scholarship_matches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('scholarship_id', sa.Integer(), nullable=False),
    sa.Column('match_score', sa.Float(), nullable=False),
    sa.Column('match_reasons', sa.JSON(), nullable=True),
    sa.Column('mismatch_reasons', sa.JSON(), nullable=True),
    sa.Column('viewed', sa.Boolean(), nullable=True),
    sa.Column('interested', sa.Boolean(), nullable=True),
    sa.Column('applied', sa.Boolean(), nullable=True),
    sa.Column('bookmarked', sa.Boolean(), nullable=True),
    sa.Column('application_status', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('match_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('viewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('applied_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['scholarship_id'], ['scholarships.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scholarship_matches_id'), 'scholarship_matches', ['id'], unique=False)
    op.create_index(op.f('ix_scholarship_matches_scholarship_id'), 'scholarship_matches', ['scholarship_id'], unique=False)
    op.create_index(op.f('ix_scholarship_matches_user_id'), 'scholarship_matches', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_scholarship_matches_user_id'), table_name='scholarship_matches')
    op.drop_index(op.f('ix_scholarship_matches_scholarship_id'), table_name='scholarship_matches')
    op.drop_index(op.f('ix_scholarship_matches_id'), table_name='scholarship_matches')
    op.drop_table('scholarship_matches')
    op.drop_index(op.f('ix_essay_ai_interactions_user_id'), table_name='essay_ai_interactions')
    op.drop_index(op.f('ix_essay_ai_interactions_id'), table_name='essay_ai_interactions')
    op.drop_index(op.f('ix_essay_ai_interactions_essay_id'), table_name='essay_ai_interactions')
    op.drop_table('essay_ai_interactions')
    op.drop_index(op.f('ix_user_profiles_zip_code'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_user_id'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_state'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_sat_score'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_intended_major'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_id'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_household_income_range'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_high_school_name'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_graduation_year'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_gpa'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_first_generation_college'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_city'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_act_score'), table_name='user_profiles')
    op.drop_table('user_profiles')
    op.drop_index(op.f('ix_tuition_data_validation_status'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_tuition_out_state'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_tuition_in_state'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_tuition_fees_out_state'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_tuition_fees_in_state'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_ipeds_id'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_id'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_has_tuition_data'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_has_living_data'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_has_fees_data'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_data_source'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_data_completeness_score'), table_name='tuition_data')
    op.drop_index(op.f('ix_tuition_data_academic_year'), table_name='tuition_data')
    op.drop_table('tuition_data')
    op.drop_index(op.f('ix_scholarships_title'), table_name='scholarships')
    op.drop_index(op.f('ix_scholarships_scholarship_type'), table_name='scholarships')
    op.drop_index(op.f('ix_scholarships_primary_image_quality_score'), table_name='scholarships')
    op.drop_index(op.f('ix_scholarships_organization'), table_name='scholarships')
    op.drop_index(op.f('ix_scholarships_image_extraction_status'), table_name='scholarships')
    op.drop_index(op.f('ix_scholarships_id'), table_name='scholarships')
    op.drop_table('scholarships')
    op.drop_index(op.f('ix_oauth_accounts_id'), table_name='oauth_accounts')
    op.drop_table('oauth_accounts')
    op.drop_index(op.f('ix_institution_matches_user_id'), table_name='institution_matches')
    op.drop_index(op.f('ix_institution_matches_institution_id'), table_name='institution_matches')
    op.drop_index(op.f('ix_institution_matches_id'), table_name='institution_matches')
    op.drop_table('institution_matches')
    op.drop_index(op.f('ix_essays_user_id'), table_name='essays')
    op.drop_index(op.f('ix_essays_id'), table_name='essays')
    op.drop_index(op.f('ix_essays_essay_type'), table_name='essays')
    op.drop_table('essays')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_oauth_states_state'), table_name='oauth_states')
    op.drop_index(op.f('ix_oauth_states_id'), table_name='oauth_states')
    op.drop_table('oauth_states')
    op.drop_index(op.f('ix_institutions_state'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_size_category'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_region'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_primary_image_quality_score'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_name'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_ipeds_id'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_image_extraction_status'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_id'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_customer_rank'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_control_type'), table_name='institutions')
    op.drop_index(op.f('ix_institutions_city'), table_name='institutions')
    op.drop_index('idx_institution_state_city', table_name='institutions')
    op.drop_index('idx_institution_name', table_name='institutions')
    op.drop_index('idx_institution_image_quality', table_name='institutions')
    op.drop_index('idx_institution_customer_rank', table_name='institutions')
    op.drop_index('idx_institution_control_size', table_name='institutions')
    op.drop_table('institutions')
    op.drop_index(op.f('ix_essay_templates_id'), table_name='essay_templates')
    op.drop_table('essay_templates')
    # ### end Alembic commands ###
